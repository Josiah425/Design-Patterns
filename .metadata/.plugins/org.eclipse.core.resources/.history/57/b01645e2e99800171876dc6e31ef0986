
public class MyArrayListTest {
	
	/**
	 * Calls 10 tests on myArrayList and
	 * stores the results into results for later use
	 * 
	 * @param (MyArrayList) myArrayList
	 * @param (Results) results
	 */
	public void testMe(MyArrayList myArrayList, Results results){
		results.storeNewResults("The sum of all the values in the array list is: " + myArrayList.sum());
		if(capacityIncrease(myArrayList)) results.storeNewResults("test capacityIncrease passed");
		else results.storeNewResults("test capacityIncrease failed, throws illegal index out of bound exception");
		if(indexOfNotFound(myArrayList)) results.storeNewResults("test indexOfNotFound passed");
		else results.storeNewResults("tes indexOfNotFound failed, returns a location of a value that shouldn't be in array list");
		if(insertOutOfRange(myArrayList))results.storeNewResults("test insertOutOfRange passed");
		else results.storeNewResults("test insertOutOfRange failed, did not throw illegal argument exception");
		if(removeElement(myArrayList)) results.storeNewResults("test removeElement passed");
		else results.storeNewResults("test removeElement failed, array list before and after manipulation were not the same");
		if(sizeIncrement(myArrayList)) results.storeNewResults("test sizeIncrement passed");
		else results.storeNewResults("test sizeIncrement failed, size didn't increment correctly");
		if(insertUniqueValue(myArrayList)) results.storeNewResults("test insertUniqueValue passed");
		else results.storeNewResults("test insertUniqueValue failed, inserted value did not get placed correctly");
		if(indexOfFound(myArrayList)) results.storeNewResults("test indexOfFound passed");
		else results.storeNewResults("test indexOfFound failed, wrong index");
		if(sumCheck(myArrayList)) results.storeNewResults("test sumCheck passed");
		else results.storeNewResults("test sumCheck failed, incorrect sum calculated");
		if(sizeCheck(myArrayList)) results.storeNewResults("test sizeCheck passed");
		else results.storeNewResults("test sizeCheck failed, incorrect size returned");
		if(insertDuplicate(myArrayList)) results.storeNewResults("test insertDuplicate passed");
		else results.storeNewResults("test insertDuplicate failed, values didn't get insered");
		
	}
	
	/**
	 * Checks if the capacity of the array increases
	 * when we reach the maximum size of the array
	 * 
	 * @param (MyArrayList) myArrayList
	 * @return
	 */
	public boolean capacityIncrease(MyArrayList myArrayList){
		//If it's already bigger than 50, then we know we increased the capacity of the array list at one point
		if(myArrayList.size() > 50) return true;
		//Add 51 elements to force a change in array list capacity, since we know initial is 50
		for(int i = 0; i < 51; i++){
			try{
				myArrayList.insertSorted(i);
			}
			catch(ArrayIndexOutOfBoundsException e){
				System.err.println("Failed to increase capacity of array");
				return false;
			}
		}
		return true;
	}
	
	/**
	 * Checks what index is returned for a value not in the array
	 * 
	 * @param (MyArrayList) myArrayList
	 * @return
	 */
	public boolean indexOfNotFound(MyArrayList myArrayList){
		myArrayList.removeValue(5000);
		if(myArrayList.indexOf(5000) != -1) return false;
		return true;
	}
	
	public boolean indexOfFoundValue(MyArrayList myArrayList){
		myArrayList.removeValue(0);
		myArrayList.removeValue(1);
		myArrayList.removeValue(2);
		myArrayList.insertSorted(1);
		myArrayList.insertSorted(0);
		myArrayList.insertSorted(1);
		myArrayList.insertSorted(2);
		if(myArrayList.indexOf(0) == 0 && myArrayList.indexOf(1) == 1 && myArrayList.indexOf(2) == 3) return true;
		return false;
	}
	
	public boolean insertOutOfRange(MyArrayList myArrayList){
		int size = myArrayList.size();
		myArrayList.insertSorted(10001);
		if(size == myArrayList.size()) return true;
		return false;
	}
	
	public boolean removeElement(MyArrayList myArrayList){
		myArrayList.removeValue(5000);
		int[] arr = getArrayOfIndexes(myArrayList);
		MyArrayList temp = createInstanceOfArrayList(myArrayList, arr);
		int val = getFirstValue(myArrayList);
		/*
		 * Insert same element 3 times, remove it
		 * Check to see if the old MyArrayList is equal
		 * to the manipulated MyArrayList
		 */
		myArrayList.insertSorted(val);
		myArrayList.insertSorted(val);
		myArrayList.insertSorted(val);
		myArrayList.removeValue(val);
		if(myArrayList.equals(temp)){
			return true;
		}
		return false;
	}
	
	public boolean sizeIncrement(MyArrayList myArrayList){
		myArrayList.removeValue(5000);
		int[] arr = getArrayOfIndexes(myArrayList);
		MyArrayList temp = createInstanceOfArrayList(myArrayList, arr);
		int val = getFirstValue(myArrayList);
		/*
		 * Insert the same value 3 times
		 * Check to see the size properly increments
		 */
		myArrayList.insertSorted(val);
		myArrayList.insertSorted(val);
		myArrayList.insertSorted(val);
		if(myArrayList.size() == temp.size()+3){
			return true;
		}
		return false;
	}
	
	public boolean insertUniqueValue(MyArrayList myArrayList){
		myArrayList.removeValue(5000);
		int[] arr = getArrayOfIndexes(myArrayList);
		MyArrayList temp = createInstanceOfArrayList(myArrayList, arr);
		int val = getFirstValue(myArrayList);
		int next = getSecondValue(myArrayList);
		myArrayList.insertSorted(val);
		/*
		 * This means there is no next value, therefore it should
		 * be placed at the end of the arrayList
		 */
		if(next == 0 && myArrayList.indexOf(val) == temp.size()) return true;
		/*
		* This means that it wasn't inserted in the correct spot, 
		* otherwise the inserted values index would be the same
		* as the next value of the original array list
		*/
		else if(myArrayList.indexOf(val) != temp.indexOf(next)) return false;
		return true;
	}
	
	public boolean indexOfFound(MyArrayList myArrayList){
		for(int i = 0; i <= 10000; i++){
			myArrayList.removeValue(i);
			if(i < 25) myArrayList.insertSorted(i);
		}
		for(int i = 0; i < 25; i++){
			if(myArrayList.indexOf(i) != i) return false;
		}
		return true;
	}
	
	public boolean sumCheck(MyArrayList myArrayList){
		for(int i = 0; i <= 10000; i++){
			myArrayList.removeValue(i);
			if(i < 20) myArrayList.insertSorted(i);
		}
		if(myArrayList.sum() != 19*20/2) return false;
		return true;
	}
	
	public boolean sizeCheck(MyArrayList myArrayList){
		for(int i = 0; i <= 10000; i++){
			myArrayList.removeValue(i);
			if(i < 20) myArrayList.insertSorted(i);
		}
		if(myArrayList.size() != 20) return false;
		return true;
	}
	
	public boolean insertDuplicate(MyArrayList myArrayList){
		for(int i = 0; i <= 10000; i++){
			myArrayList.removeValue(i);
		}
		myArrayList.insertSorted(1);
		myArrayList.insertSorted(1);
		if(myArrayList.size() != 2) return false;
		return true;
	}
	/**
	 * Getting the index values of elements
	 * so I can add in the elements into temp array list
	 * 
	 * @param (MyArrayList) myArrayList
	 */
	public int[] getArrayOfIndexes(MyArrayList myArrayList){
		int[] arr = new int[10001];
		for(int i = 0; i <= 10000; i++){
			arr[i] = myArrayList.indexOf(i);
		}
		return arr;
	}
	
	/**
	 * Creating the original myArrayList without
	 * being a reference to the object itself
	 * 
	 * @param (MyArrayList) myArrayList (int[]) arr
	 */
	public MyArrayList createInstanceOfArrayList(MyArrayList myArrayList, int[] arr){
		int prev = 0;
		int prevVal = 0;
		MyArrayList temp = new MyArrayList();
		for(int i = 0; i <= 10000; i++){
			if(arr[i] != -1){
				for(int j = 0; j < arr[i]-prev; j++) temp.insertSorted(prevVal);
				prev = arr[i];
				prevVal = i;
			}
		}
		for(int j = 0; j < myArrayList.size()-prev; j++) temp.insertSorted(prevVal);
		return temp;
	}
	
	/**
	 * Finding the First val that doesn't appear in the array list
	 * 
	 * @param (MyArrayList) myArrayList
	 */
	public int getFirstValue(MyArrayList myArrayList){
		int val = 0;
		for(int i = 0; i <= 10000; i++){
			if(myArrayList.indexOf(i) == -1){
				val = i;
				break;
			}
		}
		return val;
	}
	
	/**
	 * Finding the Second val that doesn't appear in the array list
	 * 
	 * @param (MyArrayList) myArrayList
	 */
	public int getSecondValue(MyArrayList myArrayList){
		int next = 0;
		boolean valFound = false;
		for(int i = 0; i <= 10000; i++){
			if(myArrayList.indexOf(i) == -1 && !valFound){
				valFound = true;
			}
			else if(valFound && myArrayList.indexOf(i) != -1){
				next = i;
				break;
			}
			
		}
		return next;
	}
}
