/**
* MyArrayList program that simulates the array list data structure
*
* @author  Josiah Bailey
* @since   09/04/2017
*/
public class MyArrayList {
	private final int INITIAL_SIZE = 50;
	private int[] arr;
	private int inserted;
	private int size = INITIAL_SIZE;
	
	/**
	 * Default constructor initializes inserted to 0 and each element
	 * in array to 10001
	 */
	MyArrayList(){
		arr = new int[INITIAL_SIZE];
		//set values to 10001, out of range of valid values
		for(int i = 0; i < INITIAL_SIZE; i++){
			arr[i] = 10001;
		}
		inserted = 0;
	}
	
	/**
	 * Places newValue into correct position in array 
	 * (smallest to highest) and resizes array by 50% if array is 
	 * full, increments inserted
	 * 
	 * @param (int) newValue
	 */
	public void insertSorted(int newValue){
		if(newValue < 0 || newValue > 10000){
			System.err.println("Error: you can only insert integers between 0 and 10000");
			return;
		}
		if(inserted == size){
			int[] temp = new int[size];
			for(int i = 0; i < size; i++){
				temp[i] = arr[i];
			}
			size = (int)(size*.5)+size;
			arr = new int[size];
			for(int i = 0; i < size; i++){
				if(i < inserted) arr[i] = temp[i];
				else arr[i] = 10001;
			}
		}
		boolean indexFound = false;
		int temp = arr[0];
		for(int i = 0; i < arr.length; i++){
			if(arr[i] >= newValue && !indexFound){
				indexFound = true;
			}
			if(indexFound){
				temp = arr[i];
				arr[i] = newValue;
				newValue = temp;
			}
		}
		inserted++;
	}
	
	/**
	 * Removes all instances of value from array, restructures array
	 * in sorted order and decrements inserted based on amount removed
	 * 
	 * @param (int) value
	 */
	public void removeValue(int value){
		int shift = 0;
		for(int i = 0; i < inserted; i++){
			if(arr[i] == value){
				shift++;
			}
		}
		int index = inserted;
		for(int j = 0; j < inserted; j++){
			if(arr[j] == value){
				index = j;
				break;
			}
		}
		for(int i = index; i < inserted; i++){
			if(i+shift < size) arr[i] = arr[i+shift];
			else arr[i] = 10001;
		}
		inserted -= shift;
	}
	
	/**
	 * Finds the first instance of value in the array and returns the 
	 * index
	 * 
	 * @param (int) value
	 * @return (int) first index of value in array -> -1 if not found
	 */
	public int indexOf(int value){
		if(value < 0 || value > 10000){
			System.err.println("Values can only be between 0 and 10000\n");
			return -1;
		}
		for(int i = 0; i < inserted; i++){
			if(arr[i] == value) return i;
		}
		return -1;
	}
	
	/**
	 * Gets the numbers of valid elements in the array
	 * 
	 * @return (int) inserted
	 */
	public int size(){
		return inserted;
	}
	
	/**
	 * Adds all the valid elements in array and returns total
	 * 
	 * @return (int) sum
	 */
	public int sum(){
		int sum = 0;
		for(int i = 0; i < inserted; i++){
			sum += arr[i];
		}
		return sum;
	}
	
	/**
	 * Prints to System.out all valid elements in the array
	 */
	public void toString(){
		for(int i = 0; i < inserted; i++) System.out.print(i + ": " + arr[i] + ", ");
		System.out.println();
	}
	
	/**
	 * Check if two array lists are equal to each other
	 * 
	 * @param (MyArrayList) other
	 * @return (boolean)
	 */
	public boolean equals(MyArrayList other){
		if(size() != other.size()) return false;
		for(int i = 0; i < 10001; i++){
			if(indexOf(i) != other.indexOf(i)) return false;
		}
		return true;
	}
}
